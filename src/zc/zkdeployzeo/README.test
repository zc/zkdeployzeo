Deploying ZEO storages
======================

Recipes are provided to define ZEO services based on a variety of
storages.

    >>> from zc.metarecipe.testing import Buildout
    >>> import zc.zk

    >>> zk = zc.zk.ZK('zookeeper:2181')


Basic file storages
-------------------

Create a basic file storage using a ZooKeeper node like this::

   /databases
     /main : zeo

.. -> tree

    >>> zk.import_tree(tree)

The recipe generates a file-storage configuration with blobs enabled::

    >>> from zc.zkdeployzeo import ZKFileStorageRecipe
    >>> _ = ZKFileStorageRecipe(Buildout(), 'databases,main.0', {})
    [deployment]
    name = databases,main
    recipe = zc.recipe.deployment
    user = zope
    [databases,main-data-directory]
    group = zope
    paths = /home/databases/databases/main
    recipe = z3c.recipe.mkdir
    remove-on-update = true
    user = zope
    [databases,main-storage]
    deployment = deployment
    recipe = zc.zodbrecipes:server
    shell-script = true
    zdaemon.conf = <runner>
        start-test-program ${buildout:bin-directory}/monitorcheck ${deployment:run-directory}/monitor.sock /databases/main/providers
      </runner>
    zeo.conf = <zeo>
        address :0
        invalidation-queue-size 10000
        invalidation-age 7200
        transaction-timeout 300
      </zeo>
      <zookeeper>
        connection zookeeper:2181
        path /databases/main/providers
        monitor-server ${deployment:run-directory}/monitor.sock
      </zookeeper>
    <BLANKLINE>
      %import zc.zlibstorage
      <zlibstorage>
        <filestorage>
          path /home/databases/databases/main/Data.fs
          blob-dir /home/databases/databases/main/blobs
        </filestorage>
      </zlibstorage>
    <BLANKLINE>
      %import zc.monitorlogstats
      <eventlog>
        level INFO
        <counter>
          format %(name)s %(message)s
        </counter>
        <logfile>
          path STDOUT
        </logfile>
      </eventlog>
    [rc]
    chkconfig = 345 99 10
    deployment = deployment
    digest = af2c2a295429689dcecd9675b3c7c9a58380614e
    parts = databases,main-storage
    process-management = true
    recipe = zc.recipe.rhrc

Blobs can be disabled using a property on the node::

   /databases
     /main : zeo
       blobs = False

.. -> tree

    >>> zk.import_tree(tree)

The generated zeo.conf no longer includes the blob settings::

    >>> _ = ZKFileStorageRecipe(Buildout(), 'databases,main.0', {})
    [deployment]
    name = databases,main
    recipe = zc.recipe.deployment
    user = zope
    [databases,main-data-directory]
    group = zope
    paths = /home/databases/databases/main
    recipe = z3c.recipe.mkdir
    remove-on-update = true
    user = zope
    [databases,main-storage]
    deployment = deployment
    recipe = zc.zodbrecipes:server
    shell-script = true
    zdaemon.conf = <runner>
        start-test-program ${buildout:bin-directory}/monitorcheck ${deployment:run-directory}/monitor.sock /databases/main/providers
      </runner>
    zeo.conf = <zeo>
        address :0
        invalidation-queue-size 10000
        invalidation-age 7200
        transaction-timeout 300
      </zeo>
      <zookeeper>
        connection zookeeper:2181
        path /databases/main/providers
        monitor-server ${deployment:run-directory}/monitor.sock
      </zookeeper>
    <BLANKLINE>
      %import zc.zlibstorage
      <zlibstorage>
        <filestorage>
          path /home/databases/databases/main/Data.fs
    <BLANKLINE>
        </filestorage>
      </zlibstorage>
    <BLANKLINE>
      %import zc.monitorlogstats
      <eventlog>
        level INFO
        <counter>
          format %(name)s %(message)s
        </counter>
        <logfile>
          path STDOUT
        </logfile>
      </eventlog>
    [rc]
    chkconfig = 345 99 10
    deployment = deployment
    digest = 9762af567a903a2cc4cea6b10dec3d3fec6b6e7e
    parts = databases,main-storage
    process-management = true
    recipe = zc.recipe.rhrc


Staging using demo storages
---------------------------

We'd like to set up a demo storage aronud this production storage when
creating a stage:

   /some
     /path : zeo
       /providers

.. -> production_tree

    >>> production_zk = zc.zk.ZK('zookeeper.example.com:2181')
    >>> production_zk.import_tree(production_tree, trim=True)

To set up a demo storage, create a ZooKeeper node::

   /databases
     /main : zeo demostorage
       path = '/some/path'
       before = '2012-08-22'
       zookeeper = 'zookeeper.example.com:2181'

.. -> tree

    >>> zk.import_tree(tree)

The node specifies a base path and a before time.

The recipe generates a demo-storage configuration::

    >>> from zc.zkdeployzeo import ZKDemoStorageRecipe
    >>> _ = ZKDemoStorageRecipe(Buildout(), 'databases,main.0', {})
    [deployment]
    name = databases,main
    recipe = zc.recipe.deployment
    user = zope
    [databases,main-data-directory]
    group = zope
    paths = /home/databases/databases/main/2012-08-22
    recipe = z3c.recipe.mkdir
    remove-on-update = true
    user = zope
    [databases,main-storage]
    deployment = deployment
    recipe = zc.zodbrecipes:server
    shell-script = true
    zdaemon.conf = <runner>
        start-test-program ${buildout:bin-directory}/monitorcheck ${deployment:run-directory}/monitor.sock /databases/main/providers
      </runner>
    zeo.conf = <zeo>
        address :0
        invalidation-queue-size 10000
        invalidation-age 7200
        transaction-timeout 300
      </zeo>
      <zookeeper>
        connection zookeeper:2181
        path /databases/main/providers
        monitor-server ${deployment:run-directory}/monitor.sock
      </zookeeper>
    <BLANKLINE>
      %import zc.zlibstorage
      %import zc.beforestorage
      %import zc.zkzeo
    <BLANKLINE>
      <demostorage>
        <before base>
          before 2012-08-22
    <BLANKLINE>
          <zkzeoclient>
            zookeeper zookeeper.example.com:2181
            client before
            cache-size 100MB
            read-only true
            read-only-fallback true
            var /home/databases/databases/main/2012-08-22
            server /some/path
            blob-dir /home/databases/databases/main/2012-08-22/before.blobs
            blob-cache-size 100MB
          </zkzeoclient>
        </before>
    <BLANKLINE>
        <zlibstorage changes>
          <filestorage>
            path /home/databases/databases/main/2012-08-22/changes.fs
            blob-dir /home/databases/databases/main/2012-08-22/changes.blobs
          </filestorage>
        </zlibstorage>
      </demostorage>
    <BLANKLINE>
      %import zc.monitorlogstats
      <eventlog>
        level INFO
        <counter>
          format %(name)s %(message)s
        </counter>
        <logfile>
          path STDOUT
        </logfile>
      </eventlog>
    [rc]
    chkconfig = 345 99 10
    deployment = deployment
    digest = 6b1ec88ff4a849914570c1de1a536a42eb85eda1
    parts = databases,main-storage
    process-management = true
    recipe = zc.recipe.rhrc

By default, blobs are assumed.  You can override that.  You can also
provide an alternate ZooKeeper server for the base storage::

   /databases
     /main : zeo demostorage
       path = '/some/path'
       before = '2012-08-22'
       blobs = False
       zookeeper = 'zookeeper.example.com:2181'

.. -> tree

    >>> zk.import_tree(tree)
    >>> _ = ZKDemoStorageRecipe(Buildout(), 'databases,main.0', {})
    [deployment]
    name = databases,main
    recipe = zc.recipe.deployment
    user = zope
    [databases,main-data-directory]
    group = zope
    paths = /home/databases/databases/main/2012-08-22
    recipe = z3c.recipe.mkdir
    remove-on-update = true
    user = zope
    [databases,main-storage]
    deployment = deployment
    recipe = zc.zodbrecipes:server
    shell-script = true
    zdaemon.conf = <runner>
        start-test-program ${buildout:bin-directory}/monitorcheck ${deployment:run-directory}/monitor.sock /databases/main/providers
      </runner>
    zeo.conf = <zeo>
        address :0
        invalidation-queue-size 10000
        invalidation-age 7200
        transaction-timeout 300
      </zeo>
      <zookeeper>
        connection zookeeper:2181
        path /databases/main/providers
        monitor-server ${deployment:run-directory}/monitor.sock
      </zookeeper>
    <BLANKLINE>
      %import zc.zlibstorage
      %import zc.beforestorage
      %import zc.zkzeo
    <BLANKLINE>
      <demostorage>
        <before base>
          before 2012-08-22
    <BLANKLINE>
          <zkzeoclient>
            zookeeper zookeeper.example.com:2181
            client before
            cache-size 100MB
            read-only true
            read-only-fallback true
            var /home/databases/databases/main/2012-08-22
            server /some/path
    <BLANKLINE>
          </zkzeoclient>
        </before>
    <BLANKLINE>
        <zlibstorage changes>
          <filestorage>
            path /home/databases/databases/main/2012-08-22/changes.fs
    <BLANKLINE>
          </filestorage>
        </zlibstorage>
      </demostorage>
    <BLANKLINE>
      %import zc.monitorlogstats
      <eventlog>
        level INFO
        <counter>
          format %(name)s %(message)s
        </counter>
        <logfile>
          path STDOUT
        </logfile>
      </eventlog>
    [rc]
    chkconfig = 345 99 10
    deployment = deployment
    digest = 7f61b2fdd416d5bb4451f8d9e434a398812bcda6
    parts = databases,main-storage
    process-management = true
    recipe = zc.recipe.rhrc


Demo storages involving the S3 blob server
------------------------------------------


    >>> zk1 = zc.zk.ZK("zookeeper:2181")
    >>> zk2 = zc.zk.ZK("zookeeper.example.com:2181")

    >>> import pdb; pdb.set_trace()


When the external storage being demoed uses the S3 blob server, the base
storage needs to include the S3 blob client.  Let's use this as the
outer definition:

   /some
     /path : zeo
       s3 = "blob.zope.com/cust/main:0:8888"
       /providers

.. -> production_tree

    >>> production_zk = zc.zk.ZK('zookeeper.example.com:2181')
    >>> production_zk.import_tree(production_tree, trim=True)

We'll use this as our demostorage configuration:

   /databases
     /main : zeo demostorage
       path = '/some/path'
       before = '2014-04-07'
       blobs = False
       zookeeper = 'zookeeper.example.com:2181'

.. -> tree

    >>> zk.import_tree(tree)
    >>> _ = ZKDemoStorageRecipe(Buildout(), 'databases,main.0', {})
    [deployment]
    name = databases,main
    recipe = zc.recipe.deployment
    user = zope
    [databases,main-data-directory]
    group = zope
    paths = /home/databases/databases/main/2012-08-22
    recipe = z3c.recipe.mkdir
    remove-on-update = true
    user = zope
    [databases,main-storage]
    deployment = deployment
    recipe = zc.zodbrecipes:server
    shell-script = true
    zdaemon.conf = <runner>
        start-test-program ${buildout:bin-directory}/monitorcheck ${deployment:run-directory}/monitor.sock /databases/main/providers
      </runner>
    zeo.conf = <zeo>
        address :0
        invalidation-queue-size 10000
        invalidation-age 7200
        transaction-timeout 300
      </zeo>
      <zookeeper>
        connection zookeeper:2181
        path /databases/main/providers
        monitor-server ${deployment:run-directory}/monitor.sock
      </zookeeper>
    <BLANKLINE>
      %import zc.zlibstorage
      %import zc.beforestorage
      %import zc.zkzeo
    <BLANKLINE>
      <demostorage>
        <before base>
          before 2012-08-22
    <BLANKLINE>
          <zks3blobclient>
            zookeeper zookeeper.example.com:2181
            cache-size 100MB
            client before
            read-only true
            read-only-fallback true
            server /some/path
            var /home/databases/databases/main/2012-08-22
    <BLANKLINE>
          </zks3blobclient>
        </before>
    <BLANKLINE>
        <zlibstorage changes>
          <filestorage>
            path /home/databases/databases/main/2012-08-22/changes.fs
    <BLANKLINE>
          </filestorage>
        </zlibstorage>
      </demostorage>
    <BLANKLINE>
      %import zc.monitorlogstats
      <eventlog>
        level INFO
        <counter>
          format %(name)s %(message)s
        </counter>
        <logfile>
          path STDOUT
        </logfile>
      </eventlog>
    [rc]
    chkconfig = 345 99 10
    deployment = deployment
    digest = 7f61b2fdd416d5bb4451f8d9e434a398812bcda6
    parts = databases,main-storage
    process-management = true
    recipe = zc.recipe.rhrc
